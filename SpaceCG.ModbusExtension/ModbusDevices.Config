<?xml version="1.0" encoding="utf-8" ?>

<configuration>
    
    <!-- 配置说明
    0.所有属性 Name 为唯一名称，不可重复；所有属性 Parameters 值格式为 type,ipOrComm,portOrbd
    1.节点 Connections 连接对象的集合，用于 Event.Action.@TargetName 的调用，或是单向通信
    2.节点 Modbus 为软/硬件总线配置，属性 ReadTimeout,WriteTimeout 为可选配置
    3.节点 Device 为硬件 IO 设备定义，属性 Address 值不可重复，指当前设备的地址
        3.1 其它属性包括 Name,CoilsStatusCount,DiscreteInputCount,HoldingRegisterCount,InputRegisterCount 均为可选配置，跟据其设备而自定义
        3.2 属性 {寄存器类型}Count 指默认连续寄存器数量，值为 "Count" 或者 "StartAddress,Count"
        3.3 节点 Device 可以包括子节点 Register，对 IO 设备的寄存器有更为详细的定义，包括属性 (Address,Type,Count=1,IsLittleEndian=True,Name=null,EnabledChangeEvent=True)
        3.4 寄存器类型枚举：CoilsStatus/DiscreteInput/HoldingRegister/InputRegister
    4.节点 Event 为触发/控制事件，可为设备达到某种状态时触发，或者为外部调用；包括所有可选属性 ID,Type,DeviceAddress,{寄存器类型}Address,Value,MinValue,MaxValue
    5.节点 Action 为协议调用方法，反射技术，包括必选属性 TargetName,Method,Params
    6.Connection 对象可访问的公共方法 SendMessage(string), SendBytes(byte[]) 以及其对应 API 的方法
    7.Modbus 对象可访问的方法 
        TurnSingleCoil(byte slaveAddress, ushort coilAddress);
        TurnMultipleCoils(byte slaveAddress, ushort[] addresses);
        TurnMultipleCoils(byte slaveAddress, ushort startAddress, byte count);
        WriteSingleCoil(byte slaveAddress, ushort coilAddress, bool value);
        WriteMultipleCoils(byte slaveAddress, ushort[] addresses, bool[] data);
        WriteMultipleCoils(byte slaveAddress, ushort startAddress, bool[] data);
        WriteSingleRegister(byte slaveAddress, ushort registerAddress, ushort value)
        WriteMultipleRegisters(byte slaveAddress, ushort startAddress, ushort[] data);
        StartTransport(); StopTransport(); Sleep(int millisecondsTimeout); //总线 IO 中断阻塞挂起时间
        EnabledIOEventSync(byte slaveAddress, int registerAddress = -1, RegisterType type = RegisterType.DiscreteInput);
        DisableIOEventSync(byte slaveAddress, int registerAddress = -1, RegisterType type = RegisterType.DiscreteInput, int timeout = -1);
    -->
    
    <Connections>
        <Connection Name="Modbus.DIO" Class="System.IO.Ports.SerialPort" Parameters="SERIAL,COM12,9600"/>
        <Connection Name="Modbus.DIO" Class="Modbus.Device.IModbusMaster" Parameters="TCP-RTU,127.0.0.1,2000"/>
        <Connection Name="Modbus.DIO" Class="HPSocket.IClient" Parameters="TCP,127.0.0.1,2000"/>
    </Connections>

    <Modbus Name="Modbus.Master.DIO" Parameters="SERIAL,COM3,9600">
        
        <Devices>
            <Device Address="1" CoilsStatusCount="2" DiscreteInputCount="0,2" InputRegisterCount="2">
                <!--
                <Register Address="0x0001" Type="1"/>
                <Register Address="0x0002" Type="CoilsStatus" />
                <Register Address="0x0003" Type="DiscreteInput"  />
                <Register Address="0x0004" Type="HoldingRegister" />
                <Register Address="0x0005" Type="InputRegister" Count="2" IsLittleEndian="True"/>
                -->
            </Device>
        </Devices>
        
        <Events>
            <Event ID="12" Type="InputChange" DeivceAddress="1" DiscreteInputAddress="0" Value="1" MinValue="10" MaxValue="20" >
                <Action TargetName="Modbus.Master.DIO" Method="Sleep" Params="2000"/>
                <Action TargetName="Modbus.Master.DIO" Method="WriteSingleCoil" Params="1,0,True"/>
            </Event>
            
            <Event ID="12" Type="InputChange" DeivceAddress="1" DiscreteInputAddress="0" Value="0" MinValue="10" MaxValue="20" >
                <Action TargetName="Modbus.Master.DIO" Method="WriteSingleCoil" Params="1,0,False"/>
            </Event>

            <Event ID="12" Type="InputChange" DeivceAddress="1" DiscreteInputAddress="1" Value="1" MinValue="10" MaxValue="20" >
                <Action TargetName="Modbus.Master.DIO" Method="TurnSingleCoil" Params="1,1"/>
            </Event>
        
        </Events>
        
    </Modbus>
    
</configuration>